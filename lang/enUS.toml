# Polarity language file
# THIS FILE MUST BE MODIFIED MANUALLY, USE VSCODE, VIM, EMACS OR SIMILARS
# Language rules: https://github.com/Aveeryy/Polarity/wiki/Language-rules

name = "English (United States)"
code = "enUS"
author = "Aveeryy"

[main]
exit_msg = "Exiting..."

[args]
added_arg = "Added argument \"%s\" from %s"

[args.groups]
general = "General options"
download = "Download options"
extractor = "%s options"
sync = "Synchronization options"
debug = "Debugging options"

[args.help]
add_to_sync = "Add urls to sync list if the extractor has support, then exits"
all_extractors = "Prints info from all extractors, then exits"
debug_dump_options = "Writes options to the debug directory"
debug_print_options = "Prints options, and exits"
download_dir_series = "Download directory for tv series"
download_dir_movies = "Download directory for movies"
extended_help = "Show args' options"
format_episode = "Formatting for episodes' filenames"
format_movie = "Formatting for movies' filenames"
format_season = "Formatting for seasons' directories"
format_series = "Formatting for tv series' directories"
help = "Shows help"
postprocessing = "Toggles extractor-specific post-processing"
redownload = "Redownload previously downloaded episodes"
resolution = "Preferred video resolution"
search = "Search for content in sites with extractors that support it"
status_file = "Report download status to file"
sync_refresh = "Interval the sync list gets updated, on minutes"
update_git = "Update to the latest git release "
url = "Input URLs"
verbose = "Verbosity level"

[args.metavar]
proxy = "<path>"
search = "<search term>"
verbose = "<level>"

[polarity]
all_tasks_finished = "All tasks have finished"
available_languages = "Available languages:"
language_format = "%s (%s) by %s"
no_urls = "Error: no URLs inputted."
use_help = "Use --help to display all available options"
use = 'Usage: '
search_no_extractor = "Search extractor not specified"
search_no_results = "No results found"
search_term = "Search term: "
using_version = "Using Polarity %s"

[singularity]
extracting_keys = "Extracting Widevine keys"
using_version = "Using Singularity %s"

[polarity.except]
verbose_error = "Verbose level must be between 0 to 5. current value: %s"

[dl]
cannot_download_content = "%s \"%s\" can't be downloaded: %s"
download_id = "download id"
download_successful = "Downloaded %s \"%s\""
downloading_content = "Downloading %s \"%s\""
fail_to_delete = "Can't delete old file. you'll need to do it manually"
fail_to_move = "Can't move file to download directory. you'll need to do it manually"
redownload_enabled = "Redownload is enabled, deleting old file..."
no_extractor_available = "Skipping %s \"%s\". No compatible extractor available"
no_redownload = "Skipping %s \"%s\". Has already been downloaded previously"
url = "URL"

[penguin]
doing_binary_concat = "Doing binary segment concat on track %s of %s"
doing_decryption = "Decrypting track %s of %s using key \"%s\""
debug_already_downloaded = "Skipping segment %s, already downloaded"
debug_time_download = "Segment download took: %s"
debug_time_remux = "Remux took: %s"
resuming = "Resuming download of %s..."
segment_downloaded = "Successfully downloaded segment %s"
segment_retry = "Download of segment %s failed, retrying..."
thread_started = "Started downloader \"%s\""
threads_started = "Starting %d segment downloader(s)"

[penguin.args]
ffmpeg_codec = "Postprocessing codification settings"
retries = "Number of retries to download a segment"
segment_downloaders = "Number of segment downloaders"

[penguin.protocols]
getting_playlist = "Parsing playlist"
getting_stream = "Parsing stream"
multiple_video_bitrates = "Multiple video tracks with same resolution detected"
picking_best_stream_0 = "Picking video stream with best resolution"
picking_best_stream_1 = "Picking video stream with best bitrate"
picking_best_stream_2 = "Picking audio stream with best bitrate"
selected_stream = "Picked stream: %s"

[extractor.base]
login_email_prompt = "Email/Username: "
login_password_prompt = "Password: "

[extractor.base.except]
argument_variable_empty = "Variable argument is empty"
content_unavailable = "Content is unavailable in your region or has been taken out of the platform"
invalid_type_season = "You can only create a season with a Series or Podcast object"
invalid_type_episode = "You can only create an episode with a Series or a Podcast object"
need_to_create_season = "You need to create a season before creating an episode!"

[extractor]
cloudflare_timeout = "You made too many requests to %s."
cloudflare_info = "All processed episodes will be downloaded, try again in 24 hours to download the rest!"
generic_error = "An error has happened! error message: "
get_all_seasons = "Getting information from all seasons"
get_media_info = "Getting information from %s \"%s\" (%s)"
login_failure = "Failed to log in. error code: %s"
login_loggedas = "Logged in as %s"
login_success = "Login successful"
search_no_results = "No results found on category %s with term %s"
skip_episode_id = "Skipping episode with id %s, %s"
skip_episode_name = "Skipping episode \"%s\", %s"
waiting_for_login = "Waiting for login"

[extractor.except]
cannot_identify_url = "Failed to identify URL. Invalid URL?"

[types]
series = "series"
season = "season"
episode = "episode"
movie = "movie"

[types.alt]
series = "series"
season = "season"
episode = "episode"
movie = "movie"

[update]
downloading_git = "Downloading the latest git release"
downloading_release = "Downloading the latest stable release"
downloading_native = "Downloading the latest native binary"
installing_to_path = "Installing to %s"
successful_install = "Success! Exiting in %d seconds"
updating = 'Updating...'

[update.except]
unsupported_native = "Updating native binaries is not yet implemented"

[atresplayer]
no_content_in_season = "No episodes found in %s (%s)"

[atresplayer.except]
invalid_codec = "Invalid codec set in settings."

[atresplayer.args]
codec = "Codec preferance"

[crunchyroll]
alt_bearer_fail = "Alternative Bearer fetch failed, trying with main server"
alt_bearer_no_server = "No alternative Bearer server specified, switching to main server"
alt_bearer_success = "Alternative Bearer fetch successful"
getting_bearer = "Getting Bearer token"
getting_cms = "Getting CMS policies"
getting_cms_fail = "Failed to get CMS policies"
skip_download_reason = "Content requires a premium account or is unavailable in your region"
spoof_region_fail = "Region spoof failed"
spoof_region_success = "Region spoof success. Content region is now: \"%s\""
using_method = "Using method \"%s\""

[crunchyroll.args]
subs = "Subtitles languages to download"
dubs = "Dub languages to download"
meta = "Metadata language"
hard = "Download a hardsubbed version"
email = "Your Crunchyroll' account email"
pass = "Your Crunchyroll's account password"
region = "Spoof content region to specified one"
use_alt_bearer = "Redirect Bearer token fetching to an alternative server"
alt_bearer_server = "Alternative server to fetch Bearer token"
